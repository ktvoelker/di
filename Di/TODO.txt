
TODO
====

Completeness of Basic Functionality
-----------------------------------

Write a config file that encodes all the existing keybindings

Test the new configurable keybinding code

Add commands:
    Move focus left or right

Add auto-save
    Flash a message in the status bar each time auto-save occurs

Add a quit command which triggers a final auto-save
    Hook this same command up to handle the kill signal

Keep a list of project files sorted by most-recently-visible
    Prefer the most-recently-visible file over other matches
    Already-visible files should be least-preferred

Make the chooser not crash when there are no results and enter is pressed.

Add support for "undo"

    Keep separate "undo" and "redo" stacks for each file in the project

    An undo entry can be a checkpoint, a chunk, a sequence of chunks

    A checkpoint is a clone of the buffer

    A chunk either adds or removes sequential text (but not both)
        Add specifies start point and length
        Remove specifies start point and text

    Call BeginUserAction and EndUserAction inside the key press handler

    Have event handlers which create chunks and sequence them automatically

Store session state alongside the controlling di-project.ini file
    Window layout and position in each window
    Undo and redo stacks

Add support for the pasting stack
    Visual support
    Delete-and-push command
    Push command
    Pop-and-paste command
    Pop-and-discard command
    Add to session

Add more basic editing and movement commands


Basic Usability Improvements
----------------------------

Show an error message when the new file already exists or would not be included

    This might involve adding an Event0 to the Event class which is triggered
    when the enclosing event is cancelled.

Make the directory chooser return a special "new directory" result if the "query"
contains no spaces or metacharacters and is not the complete project-relative path
of an existing directory.

    Handle the same errors as for a new file, and in the same way.

Return this special result last.

Add a configurable list of files to always ignore
    Put a nice long list of defaults in di-config.ini

Add a side panel which shows the valid bindings in a menu mode
    Don't show a binding if it has no description
    Try making command mode be a menu mode

Show the parser state in the statusbar

Fix scrolling to show cursor even when it's at the start of the last, empty line of the file.

Support runtime configuration changes, both through commands which modify the in-memory
configuration, and through a command which reloads the configuration from disk.

    Consider using a file-watching mechanism to load changes from disk automatically.

Support a system-wide configuration file.
    $ETC/di-config.ini on UNIX-like systems
    Where on Windows?

Make the user-specific configuration file come from the correct place on windows, and make its
name not start with a dot.

Add a simpler mechanism for specifying menu modes in the configuration file.

Allow mode-sets to include other mode-sets.

Provide friendlier responses to user errors such as:
    Invalid syntax in configuration file
    No project file found


Language-Oriented Improvements
------------------------------

Add support for languages, which will ultimately provide:
    Behavior for Return and Tab commands
        Tab should jump to the "correct" column if it is only preceded by whitespace on the line,
        and should otherwise begin automatic completion.
    Logic for moving by words and by matching brackets
    Syntax coloring
    Logic for dividing the buffer into subbuffers

Add intelligent window layout

    Allow multiple windows in a column
        By default, group functions from the same file in a column
            If the whole file is open, put it at the top of the column

    Group columns by directory
        Shade the background behind each group in a unique color
        Highlight name references in the source code in the same color as the directory containing the referent

    Keep track of the focus history


Advanced Features
-----------------

Allow new languages and commands to be added via separate assemblies which are loaded
and searched for relevant classes dynamically.


Testing
-------

Write test suite for FileMatcher class
