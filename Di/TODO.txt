
TODO
====

Completeness of Basic Functionality
-----------------------------------

Add support for "undo"

    1. Implement UndoElem fundamentals
    2. Add stacks to each Buffer
    3. Add event handlers to keep stacks up-to-date
    4. Add basic undo/redo commands using the stacks
    5. Load and save stacks via the Session
    6. Add a more advanced interface for viewing and filtering the stacks

    Keep separate "undo" and "redo" stacks for each Buffer in the project

        They should be stored in the session

    An UndoElem either adds or removes sequential text (or both)
        Add specifies start point and length
        Remove specifies start point and text

    Call BeginUserAction and EndUserAction inside the key press handler

        Have event handlers which create one chunk per user action

    Interface:

        Besides the basic "undo/redo", have a sidebar that shows the stack

        When viewing the sidebar, there are options that can be enabled and disabled to manipulate the view of the stack.

            When the undo or redo command is issued, use the current view of the stack rather than the real stack.

        Example changes to the view:

            Combine adjacent edits
            Combine edits on the same line
            Combine edits in the same syntactic unit (show units supported by the language)
            Combine edits made close together in time
            Combine simple insertions (changes made with the command used by insert mode)
            Filter by a search over the text added or removed
            Filter to show only:
                Strict additions
                Strict removals
                Additions (which might also have involved removal)
                Removals (which might also have involved additions)
                Strict replacements (which have both additions and removals)

Add support for the pasting stack
    Visual support
    Delete-and-push command
    Push command
    Pop-and-paste command
    Pop-and-discard command
    Add to session

    Share a common interface or superclass with undo/redo stacks

        The general ability to produce a view over a stack should reside here

        The specific ability to filter by content should reside here

Add more basic editing and movement commands

Implement the real file query algorithm

Keep a list of project files sorted by most-recently-visible
    Prefer the most-recently-visible file over other matches
    Already-visible files should be least-preferred

Add configurable end-of-line character handling
	Option 1: Detect and mimic the end-of-line characters found in a file
	Options 2-4: always use \n, \r\n, or whatever that old MacOS one is

Add configurable tab support

Both the line ending and tab configurations are evidence that we need to allow
a project-specific config file that overrides the user config file. Add that.

	But first consider alternatives such as merging the two configurations
	or simply adding specific support for certain bits of configuration to
	appear in the project config.

	Merging the configs clearly doesn't make sense for all keys (like project name).

	Allowing an enumerated subset to appear in the project config would be good,
	since some config options might be used nefariously if distributed with a
	project.

		Perhaps we should add support for "filtering" in the INI module:
			Give it two IIniFiles A and B.
			The result should be B intersect A (matching section names and keys) with the
			values taken from B.


Basic Usability Improvements
----------------------------

Show an error message when the new file already exists or would not be included

    This might involve adding an Event0 to the Event class which is triggered
    when the enclosing event is cancelled.

Make the directory chooser return a special "new directory" result if the "query"
contains no spaces or metacharacters and is not the complete project-relative path
of an existing directory.

    Handle the same errors as for a new file, and in the same way.

Return this special result last.

Add a configurable list of files to always ignore
    Put a nice long list of defaults in di-config.ini

Add a side panel which shows the valid bindings in a menu mode
    Don't show a binding if it has no description
    Try making command mode be a menu mode

Show the parser state in the statusbar

Fix scrolling to show cursor even when it's at the start of the last, empty line of the file.

Support runtime configuration changes, both through commands which modify the in-memory
configuration, and through a command which reloads the configuration from disk.

    Consider using a file-watching mechanism to load changes from disk automatically.

Support a system-wide configuration file.
    $ETC/di-config.ini on UNIX-like systems
    Where on Windows?

Add a simpler mechanism for specifying menu modes in the configuration file.

Allow mode-sets to include other mode-sets.

Provide friendlier responses to errors such as:
    Invalid syntax in configuration file
    No project file found
	I/O errors

Don't allow two instances of Di to run with the same project at the same time.

Add support for numeric escapes in parsing char-valued arguments to commands in the config.


Language-Oriented Improvements
------------------------------

Add support for languages, which will ultimately provide:
    Behavior for Return and Tab commands
        Tab should jump to the "correct" column if it is only preceded by whitespace on the line,
        and should otherwise begin automatic completion.
    Logic for moving by words and by matching brackets
    Syntax coloring
    Logic for dividing the buffer into subbuffers

Add intelligent window layout

    Allow multiple windows in a column
        By default, group functions from the same file in a column
            If the whole file is open, put it at the top of the column

    Group columns by directory
        Shade the background behind each group in a unique color
        Highlight name references in the source code in the same color as the directory containing the referent

    Keep track of the focus history


Advanced Features
-----------------

Allow new languages and commands to be added via separate assemblies which are loaded
and searched for relevant classes dynamically.


Testing
-------

Write test suite for FileMatcher class
